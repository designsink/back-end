name: Deploy to dsink

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle (skip tests)
      run: ./gradlew build -x test

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: DB_URL,DB_USERNAME,DB_PASSWORD,JWT_SECRET_KEY,FILE_UPLOAD
        script: |
          cd ~/app

          # uploads 디렉토리 생성
          mkdir -p uploads

          # 8080 포트를 사용하는 모든 프로세스 확인 및 정리
          echo "🔍 Checking processes using port 8080..."
          sudo netstat -tlnp | grep :8080 || echo "No processes found on port 8080"

          # 8080 포트를 사용하는 컨테이너들 강제 종료
          echo "🛑 Stopping containers using port 8080..."
          docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}" | grep 8080 | awk '{print $1}' | xargs -r docker stop
          docker ps -a --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}" | grep 8080 | awk '{print $1}' | xargs -r docker rm

          # 기존 dsink-app 컨테이너 완전 정리
          echo "🧹 Cleaning up existing dsink-app containers..."
          docker stop dsink-app || true
          docker rm dsink-app || true

          # 잠시 대기 (포트 해제 대기)
          echo "⏳ Waiting for port to be released..."
          sleep 5

          # 기존 이미지 제거
          echo "🗑️ Removing old images..."
          docker rmi dsink-app:latest || true

          # 새 이미지 빌드
          echo "🔨 Building new image..."
          docker build -t dsink-app:latest .

          # 빌드 성공 확인
          if [ $? -ne 0 ]; then
              echo "❌ Docker build failed!"
              exit 1
          fi

          # 포트 사용 재확인
          if netstat -tlnp | grep :8080; then
              echo "❌ Port 8080 is still in use. Please check manually."
              netstat -tlnp | grep :8080
              exit 1
          fi

          # 컨테이너 실행
          echo "🚀 Starting new container..."
          docker run -d \
            --name dsink-app \
            -p 8080:8080 \
            -v ~/app/uploads:/app/uploads \
            -e DB_URL="$DB_URL" \
            -e DB_USERNAME="$DB_USERNAME" \
            -e DB_PASSWORD="$DB_PASSWORD" \
            -e JWT_SECRET_KEY="$JWT_SECRET_KEY" \
            -e FILE_UPLOAD="$FILE_UPLOAD" \
            --restart unless-stopped \
            dsink-app:latest

          # 컨테이너 시작 확인
          if [ $? -ne 0 ]; then
              echo "❌ Failed to start container!"
              docker logs dsink-app --tail=20
              exit 1
          fi

          echo "⏳ Waiting for application to start..."
          sleep 30

          # 컨테이너 상태 확인
          docker ps | grep dsink-app
          if [ $? -ne 0 ]; then
              echo "❌ Container is not running!"
              docker logs dsink-app --tail=50
              exit 1
          fi

          # 헬스체크 (재시도 로직 개선)
          echo "🩺 Starting health check..."
          for i in {1..15}; do
              echo "Health check attempt $i/15..."
              
              # 컨테이너가 실행 중인지 먼저 확인
              if ! docker ps | grep -q dsink-app; then
                  echo "❌ Container stopped unexpectedly!"
                  docker logs dsink-app --tail=50
                  exit 1
              fi
              
              # 헬스체크 수행
              if curl -f -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
                  echo "✅ Health check passed!"
                  curl http://localhost:8080/actuator/health
                  break
              else
                  echo "⏳ Health check failed, attempt $i/15"
                  if [ $i -eq 15 ]; then
                      echo "❌ Health check failed after 15 attempts"
                      echo "📋 Container logs:"
                      docker logs dsink-app --tail=50
                      echo "📋 Container status:"
                      docker ps -a | grep dsink-app
                      exit 1
                  fi
                  sleep 10
              fi
          done

          # 사용하지 않는 이미지 정리
          echo "🧹 Cleaning up unused images..."
          docker image prune -f

          echo "🎉 Deployment completed successfully!"
          echo "📊 Container status:"
          docker ps | grep dsink-app
      env:
        DB_URL: ${{ secrets.DB_URL }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        FILE_UPLOAD: ${{ secrets.FILE_UPLOAD }}
